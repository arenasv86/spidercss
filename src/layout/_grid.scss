// ==========================================================================
//   GRID SYSTEM
// ==========================================================================

// =========================
// = Grid General Settings =
// =========================
.container {
  position: relative;
  max-width: rem($row-max-width);
  margin: 0 auto;
  padding-right: rem($container-desktop-padding);
  padding-left: rem($container-desktop-padding);
}

.container-full {
  position: relative;
  max-width: 100%;
  padding-right: rem($container-desktop-padding);
  padding-left: rem($container-desktop-padding);
}

.row {
  @include flexbox;
  @include flex(0, 1, auto);
  @include flex-flow(row wrap);

  .row {
    width: auto;
    margin-right: - rem($gutter-width);
    margin-left: - rem($gutter-width);
  }

  &.reverse {
    @extend .row;
    @include flex-direction(row-reverse);
  }
}

[class*='col'] {
  @include flex(1);
  padding-right: rem($gutter-width);
  padding-left: rem($gutter-width);


  &.reverse {
    @include flex-direction(column-reverse);
  }

  .no-gutter & {
    padding-right: 0;
    padding-left: 0;

    .row {
      margin-right: 0;
      margin-left: 0;
    }
  }
}

// ================
// = Grid Desktop =
// ================
@include grid-generator;
@include visibility-classes(desktop);
@include grid-helpers(desktop);

// ===============
// = Grid Tablet =
// ===============
@include breakpoint(tablet) {
  @include grid-generator(tablet-);
  @include visibility-classes(tablet);
  @include grid-helpers(tablet);
}

// ==============
// = Grid Phone =
// ==============
@include breakpoint(mobile) {
  .container {
    padding-right: $container-mobile-padding;
    padding-left: $container-mobile-padding;
  }

  // By default, each col in mobile fits the 100%.
  // Delete this property if you want to keep the default width assigned
  [class*='col'] {
    flex-basis: 100%;
  }

  @include grid-generator(mobile-, $grid-columns-mobile);
  @include visibility-classes(mobile);
  @include grid-helpers(mobile);
}
